{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df1 = pd.read_csv('shapes.csv')\n",
    "#print(df1.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "aa=df1['shape_id'][0]\n",
    "good=(df1[\"shape_id\"]==aa)\n",
    "#df1[good]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df2 = pd.read_csv('trips.csv')\n",
    "#df2.head()\n",
    "good2=(df2['shape_id']==aa)\n",
    "#df2[good2]\n",
    "bb=df2[\"trip_id\"][4704]\n",
    "#bb  # target trip_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df3 = pd.read_csv('stop_times.csv')\n",
    "#df3.head()\n",
    "good3=(df3['trip_id']==bb)\n",
    "#df3[good3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "list_arrival_time=df3['arrival_time'][195862:195901].tolist()\n",
    "list_stop_id=df3['stop_id'][195862:195901].tolist()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40.114158330000002, -88.173105000000007)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df4 = pd.read_csv('stops.csv')\n",
    "#df4.head()\n",
    "cc=list_stop_id[0]\n",
    "#cc\n",
    "good4=(df4['stop_id']==cc)\n",
    "df4['stop_lat'][good4],df4['stop_lon'][good4]\n",
    "df4['stop_lat'][1840],df4['stop_lon'][1840]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "list_stop_lat=[]\n",
    "list_stop_lon=[]\n",
    "for stops in list_stop_id:\n",
    "    #print(stops)\n",
    "    goodtemp=(df4['stop_id']==stops)\n",
    "    list_stop_lat.append(df4['stop_lat'][goodtemp])\n",
    "    list_stop_lon.append(df4['stop_lon'][goodtemp])\n",
    "    #list_stop_lat+=df4['stop_lat'][good4]\n",
    "    #list_stop_lon+=df4['stop_lon'][good4]\n",
    "    \n",
    "#list_stop_lat\n",
    "\n",
    "#list_row=[1840,393,986,618,2195,2407,223,704,442,2399,1111,1684,404,961,380,390,1266,1878,1598,150,1071,540,1131,180,2312,617,1803,2400,2262,1181,561,1894,1143,2000,790,1406,1035,2389]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "list_row=[1840,393,986,618,2195,2407,223,704,442,2399,1111,1684,404,961,380,390,1266,1878,1598,150,1071,540,1131,180,2312,617,1803,2400,2262,1181,561,1894,1143,2000,790,1406,1035,2389,480]\n",
    "list_stop_lat=[]\n",
    "list_stop_lon=[]\n",
    "for stops in list_row:\n",
    "    #print(stops)\n",
    "    #goodtemp=(df4['stop_id']==1840)\n",
    "    list_stop_lat.append(df4['stop_lat'][stops])\n",
    "    list_stop_lon.append(df4['stop_lon'][stops])\n",
    "    #list_stop_lat+=df4['stop_lat'][good4]\n",
    "    #list_stop_lon+=df4['stop_lon'][good4]\n",
    "    \n",
    "#list_stop_lat\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "list_distance=[]\n",
    "for i in range(len(list_stop_lat)):\n",
    "    good5=(df1[\"shape_id\"]==aa)&(df1['shape_pt_lat']==list_stop_lat[i])&(df1['shape_pt_lon']==list_stop_lon[i])\n",
    "    list_distance.append(df1['shape_dist_traveled'][good5])\n",
    "    \n",
    "#list_distance\n",
    "row2=[0,116,152,200,275,323,371,430,461,561,697,849,962,1085,1110,1136,1170,1200,1259,1283,1298,1394,1457,1488,1542,1600,1700,1738,1767,1854,1932,1972,2031,2121,2191,2242,2291,2366,2481]\n",
    "list_distance=[]\n",
    "for i in row2:\n",
    "    #print(i)\n",
    "    #good5=(df1[\"shape_id\"]==aa)&(df1['shape_pt_lat']==list_stop_lat[i])&(df1['shape_pt_lon']==list_stop_lon[i])\n",
    "    list_distance.append(df1['shape_dist_traveled'][i])\n",
    "    #print(df1['shape_dist_traveled'][i])\n",
    "    \n",
    "#list_distance\n",
    "\n",
    "#good=(df1[\"shape_id\"]==aa)\n",
    "list_pt_lat=df1['shape_pt_lat'][good]\n",
    "list_pt_lon=df1['shape_pt_lon'][good]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "format = '%H:%M:%S'\n",
    "list_arrival=[]\n",
    "for time in list_arrival_time:\n",
    "    list_arrival.append(datetime.strptime(time, format))\n",
    "    \n",
    "#list_arrival\n",
    "#print(datetime.strptime(list_arrival_time[1], format))\n",
    "#- datetime.strptime(time1, format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "list_velocity=[]\n",
    "for i in range(38):\n",
    "    ds=list_distance[i+1]-list_distance[i]\n",
    "    dt=(list_arrival[i+1]-list_arrival[i]).total_seconds()\n",
    "    if dt==0:\n",
    "        dt=15\n",
    "        \n",
    "    list_velocity.append(ds/dt)\n",
    "    \n",
    "#list_velocity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1044a5e10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nlcr/B5QUmgWpMp1LAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x107a52fd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "min, max = (2, 18)\n",
    "step = 2\n",
    "# Setting up a colormap that's a simple transtion\n",
    "mymap = mpl.colors.LinearSegmentedColormap.from_list('mycolors',['blue','red'])\n",
    "# Using contourf to provide my colorbar info, then clearing the figure\n",
    "Z = [[0,0],[0,0]]\n",
    "levels = range(min,max+step,step)\n",
    "CS3 = plt.contourf(Z, levels, cmap=mymap)\n",
    "plt.clf()\n",
    "figure3=plt.figure(figsize=(12,8))\n",
    "plt.plot(list_stop_lon,list_stop_lat,'x')\n",
    "plt.legend([\"stop\"])\n",
    "plt.xlabel(\"Longitude\")\n",
    "plt.ylabel(\"Latitude\")\n",
    "\n",
    "for i in range(38):\n",
    "    #min=min()\n",
    "    start=row2[i]\n",
    "    end=row2[i+1]\n",
    "    #print(start,end)\n",
    "    x=list_pt_lon[start:end]\n",
    "    y=list_pt_lat[start:end]\n",
    "    #print(x)\n",
    "    #print(y)\n",
    "    z=list_velocity[i]\n",
    "    r = (float(z)-min)/(max-min)\n",
    "    #print(r)\n",
    "    g = 0\n",
    "    b = 1-r\n",
    "    plt.plot(x,y,color=(r,g,b), linewidth=3)\n",
    "\n",
    "plt.xlim([-88.25,-88.16])\n",
    "plt.ylim(40.11,40.12)\n",
    "plt.colorbar(CS3) # using the colorbar info I got from contourf\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
